// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: service.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on IncreaseBalanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IncreaseBalanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IncreaseBalanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IncreaseBalanceRequestMultiError, or nil if none found.
func (m *IncreaseBalanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IncreaseBalanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := IncreaseBalanceRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetReceipt() <= 0 {
		err := IncreaseBalanceRequestValidationError{
			field:  "Receipt",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IncreaseBalanceRequestMultiError(errors)
	}

	return nil
}

// IncreaseBalanceRequestMultiError is an error wrapping multiple validation
// errors returned by IncreaseBalanceRequest.ValidateAll() if the designated
// constraints aren't met.
type IncreaseBalanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IncreaseBalanceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IncreaseBalanceRequestMultiError) AllErrors() []error { return m }

// IncreaseBalanceRequestValidationError is the validation error returned by
// IncreaseBalanceRequest.Validate if the designated constraints aren't met.
type IncreaseBalanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IncreaseBalanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IncreaseBalanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IncreaseBalanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IncreaseBalanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IncreaseBalanceRequestValidationError) ErrorName() string {
	return "IncreaseBalanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IncreaseBalanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIncreaseBalanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IncreaseBalanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IncreaseBalanceRequestValidationError{}

// Validate checks the field values on IncreaseBalanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IncreaseBalanceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IncreaseBalanceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IncreaseBalanceResponseMultiError, or nil if none found.
func (m *IncreaseBalanceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IncreaseBalanceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return IncreaseBalanceResponseMultiError(errors)
	}

	return nil
}

// IncreaseBalanceResponseMultiError is an error wrapping multiple validation
// errors returned by IncreaseBalanceResponse.ValidateAll() if the designated
// constraints aren't met.
type IncreaseBalanceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IncreaseBalanceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IncreaseBalanceResponseMultiError) AllErrors() []error { return m }

// IncreaseBalanceResponseValidationError is the validation error returned by
// IncreaseBalanceResponse.Validate if the designated constraints aren't met.
type IncreaseBalanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IncreaseBalanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IncreaseBalanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IncreaseBalanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IncreaseBalanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IncreaseBalanceResponseValidationError) ErrorName() string {
	return "IncreaseBalanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IncreaseBalanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIncreaseBalanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IncreaseBalanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IncreaseBalanceResponseValidationError{}

// Validate checks the field values on TransferBalanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransferBalanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransferBalanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransferBalanceRequestMultiError, or nil if none found.
func (m *TransferBalanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TransferBalanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserIdFrom() <= 0 {
		err := TransferBalanceRequestValidationError{
			field:  "UserIdFrom",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUserIdTo() <= 0 {
		err := TransferBalanceRequestValidationError{
			field:  "UserIdTo",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetWriteOff() <= 0 {
		err := TransferBalanceRequestValidationError{
			field:  "WriteOff",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TransferBalanceRequestMultiError(errors)
	}

	return nil
}

// TransferBalanceRequestMultiError is an error wrapping multiple validation
// errors returned by TransferBalanceRequest.ValidateAll() if the designated
// constraints aren't met.
type TransferBalanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransferBalanceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransferBalanceRequestMultiError) AllErrors() []error { return m }

// TransferBalanceRequestValidationError is the validation error returned by
// TransferBalanceRequest.Validate if the designated constraints aren't met.
type TransferBalanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransferBalanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransferBalanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransferBalanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransferBalanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransferBalanceRequestValidationError) ErrorName() string {
	return "TransferBalanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TransferBalanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransferBalanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransferBalanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransferBalanceRequestValidationError{}

// Validate checks the field values on TransferBalanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransferBalanceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransferBalanceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransferBalanceResponseMultiError, or nil if none found.
func (m *TransferBalanceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TransferBalanceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TransferBalanceResponseMultiError(errors)
	}

	return nil
}

// TransferBalanceResponseMultiError is an error wrapping multiple validation
// errors returned by TransferBalanceResponse.ValidateAll() if the designated
// constraints aren't met.
type TransferBalanceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransferBalanceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransferBalanceResponseMultiError) AllErrors() []error { return m }

// TransferBalanceResponseValidationError is the validation error returned by
// TransferBalanceResponse.Validate if the designated constraints aren't met.
type TransferBalanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransferBalanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransferBalanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransferBalanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransferBalanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransferBalanceResponseValidationError) ErrorName() string {
	return "TransferBalanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TransferBalanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransferBalanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransferBalanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransferBalanceResponseValidationError{}
